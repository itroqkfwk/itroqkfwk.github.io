---
layout: single
title:  "자바 교육#1"
---


2024-10-31 자바#1

교육 종료 후 정리를 하고 모르는건 정리한 것에서 찾고 그 후에 구글링이나 chat gpt 이용

자바JDK17은 Tomcat10만 호환됨
EditPlus나 메모장 노션에 정리☆
1.회원가입 해야됨
-구글
-깃허브
-오라클(http://www.oracle.com)
2.환경설정
-JDK(Java Development Kit) 설치
 -> C:\Program Files\Java\jdk-17에 기본적으로 설치됨.
 -> 환경변수 설정
   =>시작 > 마우스 오른쪽 클릭 > 시스템 > 고급 시스템 설정 > 고급탭 > 환경변수
   *두가지 환경변수
    JAVA_HOME=C:\Program Files\Java\jdk-17 (JDK의 홈디렉터리 설정)
    PATH=%JAVA_HOME%\bin;기본 Path (윈도우의 프로그램에 명령어 경로 설정)
	 C:\Program Files\Java\jdk-17\bin;기본 Path 위에랑 동일
환경변수 설정 후 cmd창 재실행해서 set확인
대부분 명령어는 bin폴더안에 있음
 *주요 명령어 2개
   javac.exe (컴파일 하는 명령어, 컴파일러 라고 부름)
   java.exe (실행하는 명령어, 인터프린터 라고 부름)

 *자바 실행 순서
  소스 파일(*.java 예> Test.java) <=확장자
  컴파일 작업(컴파일러 이용: Javac.exe)
	문법: 예>javac Test.java <= Test.class 파일이 생성됨
  실행 작업(인터프린터 이용: Java.exe)
	문법: 예>java Test <= Test 클래스가 실행되어 결과가 나옴.

 *JDK 설치시 설치되는 JVM(Java Virtual Machine)
  -구조↓로 인해서 운영체제에 독립적
	*.class
	--------------
	JVM
	--------------
	OS (Window, Linux, Mac)
	-----
	H/W
 JDK (Java Development Kit : 자바개발 환경) <=실제로 자바어플리케이션 개발하는 개발자 환경
 -JRE + API + 개발도구(javac, +@)

 JRE (Java RunTime Environment : 자바실행 환경) <=실제로 자바 어플리케이션을 실행하는 일반 사용자 환경
 -JVM + API

 자바 API : 자바에서 미리 만들어서 제공된 클래스 파일들을 의미.
	  압축해서 제공됨. (*.jar 형식)
	C:\Program Files\Java\jdk-17\lib\src.zip 파일이 API의 소스파일

 * 자바의 압출 파일 3가지
   -jar
    ㄴ 일반적인 SE 환경의 압축파일
      예> *.jar
   -war
    ㄴ 일반적인 EE 환경의 압축파일
      예> *.war
   -ear
    ㄴ jar + war 환경의 압축파일
      예> *.ear

자바 API 문서 : 어떤 자바 API가 있는지 알려주는 메뉴얼
 ㄴ 웹으로 제공됨
https://docs.oracle.com/en/java/javase/17/docs/api/index.html

 2. 개발툴 (IDE)
    -인텔리제이
    http://jetbrains.com
       -이클립스
    http://eclipse.org
    인스톨 프로그램 아님. 압축 풀면 설치됨.
    C:\java_study\eclipse\workspace 생성 > eclipse.exe 실행
    eclipse 실행 후 추가작업

    가.한글 인코딩 설정 (utf-8)
    ㄴeclipse의 window항목 -> preferences -> General ->workspace -> Text File Encoding에서 UTF-8로 설정
    나.글꼴 설정
    ㄴeclipse의 window항목 -> preferences -> General -> Apper~ > Color&pont -> Basic -> Text Font에서 설정 / Debug에 Console Font 변경 가능
    다.컴파일러 변경
    ㄴeclipse의 window항목 -> preferences -> Java -> Compiler -> level 변경
    라.JRE 변경
    ㄴeclipse의 window항목 -> preferences -> installed JRE -> 기존 JRE 삭제(Default 변경)
    openperspective로 언어 선택으로 개발가능

글꼴은 자바개발자 Consolas 많이씀

3.자바 특징
-OOP (Object Oriented Programming)
-플랫폼 독립적(OS 독립적)
 가능한 이유가 JVM 덕분이다.
-개발자가 더 이상 메모리를 관리하지 않는다. (GC : Garbage Collector)
 GC가 메모리에 있는 사용되지 않는 인스턴스(클래스가 메모리에 올라간 상태)를 자동으로 제거한다.
4.자바개발 환경 3가지(기준: 디바이스[장치])
-Java SE(Java Standard Edition)
 -> 일반 PC
 -> 자바 기술
 -> 구축방법: JDK 설치
-Java EE(Java Enterprise Edition)
 -> 서버(웹 서버)
 -> 웹 페이지 개발 기술(Servlet & JSP)
 -> 구축방법: Tomcat 설치
*SE와 EE(SE에 조금 포함)는 교집합
 +그래서 자바 개발시 SE 설치 필수
-Java ME(Java Micro Edition)
 -> 휴대용(PDA,셋탑[검침기같은])
5.이클립스 프로젝트 생성
 -module은 체크안함 ☆☆☆☆☆
New java class -> package는 폴더같은거라 안적으면 default로 됨
6.자바클래스 작성 (*.java)
 -반드시 첫글자는 영문자이고 또는 _(언더바) 또는 $만 가능
  이후에 숫자지정은 가능, 공백은 안됨
 -대소문자 구별됨
 -특수문자는 _(언더바) 또는 $ 2개만 가능.
 -한글은 가능하지만 권장안함
 -자바클래스 첫글자는 반드시 대문자로 지정한다(권장)
 -문법 :
	   public class 클래스명 {
		//구성요소 3가지
		  1.변수
		  2.생성자
		  3.메서드
	   }
 -반드시 지정된 클래스명으로 파일을 저장해야 된다.(클래스명.java)
 -자바에서는 클래스가 프로그램의 최소 단위이다.(그래서 무조건 클래스 부터 만들어야됨), 매우 비효율적이다, 따라서 함수형 프로그래밍이다.(클래스 없이 메서드 사용 가능)

 *최종 샘플 코드
  public class HelloTest {

	public static void main(String[] args) {
		
		System.out.println("Hellow World");
	}

  }
	클래스(대문자찾으면 됨)는 몇개 일까요? 3개
	HelloTest.class (개발자가 직접 만든 클래스)
	String.class (자바 API)
	System.class (자바 API)

7.main 메서드
 -하나의 자바 어플리케이션을 작성할때 반드시 존재하는 메서드임☆☆☆☆☆
 -main 메서드 역할은 실행하기 위함이다. 즉 프로그램의 시작점 역할 담당(starting point)
  반드시 다음 문법을 따라야 된다↓
  public static void main(String[] args) {}
8.이클립스 단축키
 -저장 : ctrl + S
 -단일문장 주석 : ctrl + /
 -한줄 복사 : ctrl + alt + 화살표키
 -줄바꾸기 : 문장선택 후 alt + 화살표키
 -한줄 삭제 : ctrl + d
 -이전 작업 취소 : ctrl +z
 -이름바꾸기 : F2
 -sysout 적고 ctrl + spacebar 하면 자동으로 System.out.println() 생성
 -코드 자동 완성 : ctrl + spacebar
9.식별자(identifier)
 1)개념
   자바소스에서 지정한 단어
 2)문법
    -반드시 첫글자는 영문자이고 또는 _(언더바) 또는 $만 가능 이후에 숫자지정은 가능, 공백은 안됨
    -대소문자 구별됨
    -특수문자는 _(언더바) 또는 $ 2개만 가능.
    -한글은 가능하지만 권장안함
    -자바클래스 첫글자는 반드시 대문자로 지정한다(권장)

	   public class 클래스명 {
		//구성요소 3가지
		  1.변수
		  2.생성자
		  3.메서드
	   }
	
	클래스명 권장방법 : 첫글자 대문자, 의미있는 명사형
	변수 권장방법 : 모두 소문자, 의미있는 명사형
	생성자 : 반드시 클래스명으로 지정해야 된다
	메서드 권장방법 : 모두 소문자, 의미있는 동사형

  3)식별자 종류
   가.시스템이 미리 예약한 식별자(시스템 정의 식별자)
	-예약어(키워드)라고 부른다.
	 예> public, protected, private, class, interface, abstract, final, default, switch, for, if, transient, void, enum ...
   나.사용자 정의 식별자
	-클래스, 변수, 메서드 식별자가 됨
	-시스템 정의 식별자(예약어) 이름으로 지정하면 안됨

*리터럴(literal)
 -자바코드상에서 사용된 데이터 (값) 의미
  예> 	문자열 데이터 : "홍길동", "hello"
		반드시 쌍따옴표 지정
	문자 데이터 : '남', '여'
		반드시 홑따옴표 지정
	정수 데이터 : 100
	실수 데이터 : 3.14
	논리 데이터 : 참/거짓 (true/false)
 =>자바는 문자와 문자열을 다르게 처리 ☆☆☆☆☆

*괄호
 () : 소괄호
 {} : 중괄호
 [] : 대괄호

10. 데이터 종류(데이터 타입, 데이터형 <-다같은 의미)☆☆☆☆☆!
     -개념 : 자바언어가 처리할 수 있는 데이터 종류 의미

 1. 기본형 데이터 (Primitive Data Type : PDT)
    -수치형 데이터
    	-정수 : 	byte (크기 : 1byte, 8bit)
    		short (크기 : 2byte, 16bit)
    		int (크기 : 4byte, 32bit) - 기본
    		long (크기 : 5byte, 64bit)
    		

    	-정수 표현 : 10진수, 2진수, 8진수, 16진수 모두 표현가능
    		예> 10진수 : 0~9 이용해서 표현
    			100, -30, 0
    		      2진수 : 0|1 이용해서 표현, 접두사로 0b 지정
    			0b1, 0b0
    		      8진수 : 0~7 이용해서 표현, 접두사로 0 지정
    			01, 02, .....07
    		      16진수 : 0~9, A, B, C, D, E, F 이용해서 표현, 접두사로 0x 지정
    			0x1, 0x2, .....0xE, 0xF
    	
    	-실수 : 	float (크기 : 4byte, 32bit)
    		double (크기 : 8byte, 64bit) - 기본
    		
    		float 표현 : 3.14F, 3.14f
    		double 표현 : 3.14 , 3.14D, 3.14d

    -문자 데이터 : char (캐릭터) (크기 : 2byte, 16bit)
    		유니코드이기 때문에 전 세계의 모든 언어 표현이 가능함.
    -논리 데이터 : boolean (불린) (크기 : 1byte, 8
    bit)

    	      boolean 표현 : ture(참)
    			 flase(거짓)

 => 기본형은 총 8개

  2) 참조형 데이터 (Reference Data Type : RDT)
     -기본형 8가지가 아닌 나머지 모두
      ㄴ대표적으로 클래스, 배열, 인터페이스가 있음
      ㄴ반드시 클래스, 배열, 인터페이스를 데이터로 간주☆☆☆☆☆
